-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}
\func second (x y z : Nat) : Nat => y
\func apply (f : Nat -> Nat) (x : Nat) : Nat => f x
\func compose (f g : Nat -> Nat) (x : Nat) : Nat => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x y : Nat) : Nat => f y x
\func second' => flip (second 0)


-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func \fixl 5 f1 (x y : Nat) => x
\func \fixl 5 f2 : Nat => 0
\func \infixl 4 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func \fixl 5 f4 : Nat => 0
\func \infixl 5 f5 => f1
\func \fixl 5 f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}
\func if' (x t e : Bool) : Bool \elim x
  | false => t
  | true => e


-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if' x (if' y true false) false

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x * x ^ y

\func fac (x : Nat) : Nat \elim x
  | 0 => 1
  | suc x => (suc x) * fac x

-- 7. Определите mod и gcd.

\func mod (x y : Nat) : Nat => mod' (if (x < y) y x) x y
  \where \func mod' (s x y : Nat) : Nat \elim s
    | 0 => 0
    | suc s => if (x < y) x (mod' s (x - y) y)

\func gcd (x y : Nat) : Nat => gcd' (if (x < y) y x) x y
  \where \func gcd' (s x y : Nat) : Nat \elim s
    | 0 => 0
    | suc s => \case x, y \with {
    | 0, y => y
    | x, 0 => x
    | x, y => if (x < y) (gcd' s x (mod y x)) (gcd' s (mod x y) y)
    }
